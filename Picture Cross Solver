import java.util.*;
public class Solveme 
{
	static int findSum(int a,int b)
	{
		if(a<0)
		{
			System.out.println("One of the numbers that you have entered for the Column Information is incorrect. Please reenter the column information.");
			return -1;
		}
		int sum = 0;
		int reps = 0;
		
		while (a != 0)
		{
			sum = sum + a%10;
			a = a/10;
			reps++;
		}
		if(sum+reps-1>b)
		{
			System.out.println("The values entered for the column information are greater than the potential outcomes for the given puzzle. Please reenter the column information");
			return -1;
		}
		return sum;
	}
	
	static void printMatrix(int a[][])
	{
		for (int i=0; i<a.length; i++)
		{
			for(int j=0; j<a[i].length; j++)
			{
				System.out.print(a[i][j] + "  ");
			}
			System.out.println();
		}
		
	}
	//a = rowsize.length, b = colinfo[x], c is total, d is current position
	static boolean fillCol(int a, int b, int c[][], int d)
	{
		if(a==b)
		{
			for(int i=0; i<a;i++)
			{
				c[i][d] = 1;
			}
			return true;
		}
		return false;
	}
	
	static boolean fillRow(int a, int b, int c[][], int d)
	{
		if(a==b)
		{
			for(int i=0; i<a;i++)
			{
				c[d][i] = 1;
			}
			return true;
		}
		return false;
	}
	
	public static void main(String[] args) 
	{
		System.out.println(74/10);
		//Creates a scanner for the user to input information and creates the integers columns and rows
		Scanner info = new Scanner(System.in);
		int columns;
		int rows;
		
		System.out.println("Hello! Welcome to the Picture Cross Puzzle Solver! You can enter -1' to exit at any time!");
		System.out.println("Please enter the number of columns your puzzle has:");
		columns = info.nextInt();
		if(columns==-1)//exits the solver
		{
			System.out.println("You have exited the program");
			return;			
		}
		System.out.println("Please enter the number of rows your puzzle has:");
		rows = info.nextInt();
		if(rows==-1) //exits the solver
		{
			System.out.println("You have exited the program");
			return; 
		}
		
		//Creates the arrays colsize and rowsize equal to the inputed size of the columns and rows
		int[] colsize = new int[columns];
		int[] rowsize = new int[rows];
		
		//Creates the total puzzle matrix equal to the inputed size and row
		int [] [] total = new int [rows][columns];
		
		//Sets puzzle values equal to 0 
		for(int i = 0; i<colsize.length; i++)
		{
			for (int j=0; j<rowsize.length; j++)
			{
				total [j][i]= 0;
			}
		}
		printMatrix(total);
		
		//Prints the Matrix total (probably should make this into a function)
		/*
		for (int i=0; i<total.length; i++)
		{
			for(int j=0; j<total[i].length; j++)
			{
				System.out.print(total[i][j] + "  ");
			}
			System.out.println();
		}
		*/
		int[] colinfo = new int[colsize.length];
		int[] rowinfo = new int[rowsize.length];
		
		//inputs the information needed to solve the puzzle
		System.out.println("Please enter the information given to you in the columns. If there are multiple numbers in the clues do not put spaces in between them");
		for(int i=0; i<colsize.length; i++)
		{
			System.out.println("Please enter the info for the " + i + " column:");
			int x = info.nextInt();
			colinfo[i] = x;
		}
		for(int j=0; j<rowsize.length; j++)
		{
			System.out.println("Please enter the info for the " + j + " row:");
			int y = info.nextInt();
			rowinfo[j]=y;
		}
		
		//Checks to see if the entered information is legal
		for(int i = 0; i<colinfo.length; i++)
		{
			int x = findSum(colinfo[i],rowsize.length);
			if(x==-1)
			{
				//Restarts the program for the user to re-enter the puzzle information (temp)
				System.out.println("Please restart the program");
				return;
			}		
		}

		for(int j=0; j<rowinfo.length; j++)
		{
			int y = findSum(rowinfo[j], colsize.length);
			if(y==-1)
			{
				System.out.println("Please restart the program");
				return;
			}
		}

		//printMatrix(total);
		
		//Solving the puzzle
		for (int i=0; i<colsize.length;i++)
		{
			for(int j=0; j<rowsize.length; j++)
			{
				fillCol(rowsize.length, colinfo[i], total, i);
				fillRow(colsize.length, rowinfo[j], total, j);		
			}

		}
		//Checks for full a full row on the top or bottom of the puzzle and completes the column if the column information is greater than 1
		for (int i=0; i<colsize.length; i++)
		{
			for (int j=0; j<rowsize.length; j++)
			{
				if(total[i][j]==1 && (i+1==colsize.length|i==0))
				{
					if(colinfo[j]>1)
					{
						int temp = colinfo[j];
						if (temp==rowsize.length)
						{
							temp--;
						}
						if (i==0)
						{
							for(int x=0;x<temp; x++)
							{
								total[x][j] = 1;
							}
						}
						if(i+1==colsize.length)
						{
							for(int x=temp; x>0; x--)
							{
								total[x][j] = 1;
							}
						}
					}
				}
			}
		}
		printMatrix(total);
	}
}
